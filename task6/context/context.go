// реализации с остановкой горутины с помощью контекста

package main

import (
	"context"
	"fmt"
	"math/rand"
)

func main() {
	// Создаем канал для передачи случайных чисел
	ch := make(chan int)
	// Создаем контекст с возможностью отмены и сохраняем функцию отмены в переменную cancel
	ctx, cancel := context.WithCancel(context.Background())
	// Устанавливаем отмену контекста как последнюю операцию перед выходом из main
	defer cancel()

	// Горутина ожидает сигнал отмены контекста или готовность канала для записи
	go func(ctx context.Context) {
		for {
			select {
			// Если контекст отменен, возвращаемся из горутины, останавливая ее
			case <-ctx.Done():
				return
			// Если канал готов к записи, отправляем в него случайное число
			case ch <- rand.Intn(15):
			}
		}
	}(ctx)

	// Цикл выполняется 5 раз для имитации работы
	for i := 0; i < 5; i++ {
		fmt.Println(<-ch)
	}
}
